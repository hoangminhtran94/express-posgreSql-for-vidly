// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./database.db?socket_timeout=5000&connection_limit=2"
}

model Genre {
  id     String  @id @default(uuid())
  name   String  @unique
  movies Movie[]
}

model Movie {
  id              String      @id @default(uuid())
  title           String      @unique
  numberInStock   Int
  dailyRentalRate Float
  description     String
  image           String
  genre           Genre       @relation(fields: [genreId], references: [id], onDelete: Cascade)
  genreId         String
  owner           User        @relation(fields: [ownerId], references: [id])
  ownerId         String
  cartItems       CartItem[]
  orderItems      OrderItem[]
  createAt        DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  likedByUsers    MovieLike[]
}

model CartItem {
  id             String       @id @default(uuid())
  movie          Movie        @relation(fields: [movieId], references: [id], onDelete: Cascade)
  shoppingCart   ShoppingCart @relation(fields: [shoppingCartId], references: [id], onDelete: Cascade)
  movieId        String
  shoppingCartId String
  quantity       Int
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId  String
  movie    Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId  String
}

model OrderUser {
  id String @id @default(uuid())
}

model Order {
  id             String       @id @default(uuid())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  orderItems     OrderItem[]
  createAt       DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  shoppingCart   ShoppingCart @relation(fields: [shoppingCartId], references: [id])
  shoppingCartId String
  orderStatus    OrderStatus  @relation(fields: [orderStatusId], references: [id])
  orderStatusId  String       @default("pending")
}

model ShoppingCart {
  id        String     @id @default(uuid())
  owner     User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  cartItems CartItem[]
  createAt  DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  ownerId   String     @unique
  orders    Order[]
}

model User {
  id           String         @id @default(uuid())
  image        String
  firstName    String
  lastName     String
  phoneNumber  String
  address      String
  username     String         @unique
  password     String
  movies       Movie[]
  orders       Order[]
  shoppingCart ShoppingCart?
  likedMovies  MovieLike[]
  messageRoute MessageRoute[]
}

model MovieLike {
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie   Movie   @relation(fields: [movieId], references: [id], onDelete: Cascade)
  liked   Boolean @default(false)
  userId  String
  movieId String

  @@id([userId, movieId])
}

model OrderStatus {
  id    String  @id @unique
  name  String  @unique
  Order Order[]
}

model MessageRoute {
  id            String      @id @default(uuid())
  messageRoom   MessageRoom @relation(fields: [messageRoomId], references: [id])
  messageRoomId String
  user          User        @relation(fields: [userId], references: [id])
  userId        String
}

model MessageRoom {
  id             String         @id @unique
  messageRoute   MessageRoute[]
  messageRouteId String
}
